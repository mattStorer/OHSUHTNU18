{
  "resourceType": "Library",
  "id": "library-ohsuhtn-stu3-average-blood-pressure-0-1-0",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2020-02-10T11:00:00.000-08:00"
  },
  "url": "https://github.com/mattStorer/OHSUHTNU18/blob/develop/docs/FHIR%20artifacts/Library_ohsuhtn-stu3-average-blood-pressure-0.1.0.json",
  "version": "0.1.0",
  "name": "OHSUHTN_STU3_Average_Blood_Pressure",
  "title": "Library - OHSU Test Logic for calculating Average Blood Pressure",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/library-type",
        "code": "logic-library",
        "display": "Logic Library"
      }
    ]
  },
  "date": "2020-02-04T00:00:00-08:00",
  "publisher": "Oregon Health and Science University (OHSU)",
  "description": "Calculates average blood pressure",
  "purpose": "The purpose of this is to act as a 'hello world' sort of simple logic for testing end-to-end processing of the system.",
  "usage": "This is to be used in conjunction with a patient-facing FHIR application.",
  "useContext": [
    {
      "code": {
        "system": "http://hl7.org/fhir/usage-context-type",
        "code": "focus",
        "display": "Clinical Focus"
      },
      "valueCodeableConcept": {
        "coding": [
          {
            "system": "http://snomed.info/sct",
            "code": "371622005",
            "display": "Elevated BP without HTN diagnosis"
          }
        ]
      }
    }
  ],
  "jurisdiction": [
    {
      "coding": [
        {
          "system": "urn:iso:std:iso:3166",
          "code": "US",
          "display": "United States of America"
        }
      ]
    }
  ],
  "topic": [
    {
      "text": "Hypertension Management"
    }
  ],
  "contributor": [
    {
      "type": "author",
      "name": "Matthew Storer"
    }
  ],
  "copyright": "Â© OHSU 2020+.",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-fhirhelpers-3-0-0"
      }
    },
    {
      "type": "depends-on",
      "url": "http://hl7.org/fhir|3.0.0"
    }
  ],
  "dataRequirement": [
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "Illicit Drug Screening"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "component-code",
          "valueSetString": "Illicit Drug Screening"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "Opioid Drug Screening"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "component-code",
          "valueSetString": "Opioid Drug Screening"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}